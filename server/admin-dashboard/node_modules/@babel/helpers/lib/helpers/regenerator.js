"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _regenerator;
var _regeneratorDefine = require("./regeneratorDefine.js");
function _regenerator() {
  var undefined;
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  var _;
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    (0, _regeneratorDefine.default)(generator, "_invoke", makeInvokeMethod(innerFn, self, tryLocsList), true);
    return generator;
  }
  var ContinueSentinel = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  _ = Object.getPrototypeOf;
  var IteratorPrototype = [][iteratorSymbol] ? _(_([][iteratorSymbol]())) : ((0, _regeneratorDefine.default)(_ = {}, iteratorSymbol, function () {
    return this;
  }), _);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  (0, _regeneratorDefine.default)(Gp, "constructor", GeneratorFunctionPrototype);
  (0, _regeneratorDefine.default)(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = "GeneratorFunction";
  (0, _regeneratorDefine.default)(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
  (0, _regeneratorDefine.default)(Gp);
  (0, _regeneratorDefine.default)(Gp, toStringTagSymbol, "Generator");
  (0, _regeneratorDefine.default)(Gp, iteratorSymbol, function () {
    return this;
  });
  (0, _regeneratorDefine.default)(Gp, "toString", function () {
    return "[object Generator]";
  });
  function mark(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      (0, _regeneratorDefine.default)(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  }
  function makeInvokeMethod(innerFn, self, tryLocsList) {
    var state = 0;
    function invoke(_methodName, _method, _arg) {
      if (state > 1) {
        throw TypeError("Generator is already running");
      } else if (done) {
        if (_method === 1) {
          Context_dispatchExceptionOrFinishOrAbrupt